{
  "address": "0xD239e7035564ED3a472DE1664D04900d4Ad429D2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "listType",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "addOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "addOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "listType",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "addStore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "listType",
          "type": "string"
        }
      ],
      "name": "getOperators",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwners",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "listType",
          "type": "string"
        }
      ],
      "name": "getStore",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "listType",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "removeOperators",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "listType",
          "type": "string"
        },
        {
          "internalType": "address[]",
          "name": "addrs",
          "type": "address[]"
        }
      ],
      "name": "removeStore",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2752e28cd1dce8da65b08ab9b5137359139a6ad1ffc97a57b344d7937bc3e85",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x3353b44be83197747eB6a4b3B9d2e391c2A357d5",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "1821757",
    "logsBloom": "0x
    "blockHash": "0x6d6fe061ada6c8f41ef7a4595ab23113ae4bbf26c59cfc8288f90418571814ae",
    "transactionHash": "0xe2752e28cd1dce8da65b08ab9b5137359139a6ad1ffc97a57b344d7937bc3e85",
    "logs": [],
    "blockNumber": 11234295,
    "cumulativeGasUsed": "1821757",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x3353b44be83197747eB6a4b3B9d2e391c2A357d5"
  ],
  "numDeployments": 3,
  "solcInputHash": "2a0a16cd54c785707e8c8182fba3b8b6",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"listType\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"addOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"listType\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"addStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"listType\",\"type\":\"string\"}],\"name\":\"getOperators\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwners\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"listType\",\"type\":\"string\"}],\"name\":\"getStore\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"listType\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeOperators\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"listType\",\"type\":\"string\"},{\"internalType\":\"address[]\",\"name\":\"addrs\",\"type\":\"address[]\"}],\"name\":\"removeStore\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Cloud/AddressStore.sol\":\"AddressStore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/structs/EnumerableSet.sol)\\n// This file was procedurally generated from scripts/generate/templates/EnumerableSet.js.\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n *\\n * [WARNING]\\n * ====\\n * Trying to delete such a structure from storage will likely result in data corruption, rendering the structure\\n * unusable.\\n * See https://github.com/ethereum/solidity/pull/11843[ethereum/solidity#11843] for more info.\\n *\\n * In order to clean an EnumerableSet, you can either remove all elements one by one or create a fresh instance using an\\n * array of EnumerableSet.\\n * ====\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping(bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) {\\n            // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            if (lastIndex != toDeleteIndex) {\\n                bytes32 lastValue = set._values[lastIndex];\\n\\n                // Move the last value to the index where the value to delete is\\n                set._values[toDeleteIndex] = lastValue;\\n                // Update the index for the moved value\\n                set._indexes[lastValue] = valueIndex; // Replace lastValue's index to valueIndex\\n            }\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        return set._values[index];\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function _values(Set storage set) private view returns (bytes32[] memory) {\\n        return set._values;\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(Bytes32Set storage set) internal view returns (bytes32[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        bytes32[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(AddressSet storage set) internal view returns (address[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        address[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n    /**\\n     * @dev Returns the value stored at position `index` in the set. O(1).\\n     *\\n     * Note that there are no guarantees on the ordering of values inside the\\n     * array, and it may change when more values are added or removed.\\n     *\\n     * Requirements:\\n     *\\n     * - `index` must be strictly less than {length}.\\n     */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n\\n    /**\\n     * @dev Return the entire set in an array\\n     *\\n     * WARNING: This operation will copy the entire storage to memory, which can be quite expensive. This is designed\\n     * to mostly be used by view accessors that are queried without any gas fees. Developers should keep in mind that\\n     * this function has an unbounded cost, and using it as part of a state-changing function may render the function\\n     * uncallable if the set grows to a point where copying to memory consumes too much gas to fit in a block.\\n     */\\n    function values(UintSet storage set) internal view returns (uint256[] memory) {\\n        bytes32[] memory store = _values(set._inner);\\n        uint256[] memory result;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            result := store\\n        }\\n\\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0xc3ff3f5c4584e1d9a483ad7ced51ab64523201f4e3d3c65293e4ca8aeb77a961\",\"license\":\"MIT\"},\"contracts/Cloud/AddressStore.sol\":{\"content\":\"// SPDX-License-Identifier: LGPL-3.0-only\\npragma solidity ^0.8.4;\\n\\nimport \\\"@openzeppelin/contracts/utils/structs/EnumerableSet.sol\\\";\\n\\ncontract AddressStore {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n\\n    EnumerableSet.AddressSet private owners;\\n    mapping (string=>EnumerableSet.AddressSet) private operators;\\n    mapping (string=>EnumerableSet.AddressSet) private stores;\\n\\n    constructor(address owner) {\\n        owners.add(owner);\\n    }\\n\\n    function addOperators(string memory listType, address[] memory addrs) public onlyOwner {\\n        for(uint i = 0; i < addrs.length; i++) {\\n            operators[listType].add(addrs[i]);\\n        }\\n    }\\n\\n    function addStore(string memory listType, address[] memory addrs) public onlyOperator(listType) {\\n        for(uint i = 0; i < addrs.length; i++) {\\n            stores[listType].add(addrs[i]);\\n        }\\n    }\\n\\n    function removeOperators(string memory listType, address[] memory addrs) public onlyOwner {\\n        for(uint i = 0; i < addrs.length; i++) {\\n            operators[listType].remove(addrs[i]);\\n        }\\n    }\\n\\n    function removeStore(string memory listType, address[] memory addrs) public onlyOperator(listType) {\\n        for(uint i = 0; i < addrs.length; i++) {\\n            stores[listType].remove(addrs[i]);\\n        }\\n    }\\n\\n    function getOperators(string memory listType) public view returns (address[] memory) {\\n        return operators[listType].values();\\n    }\\n\\n    function getStore(string memory listType) public view returns (address[] memory) {\\n        return stores[listType].values();\\n    }\\n\\n    modifier onlyOwner() {\\n        require(owners.contains(msg.sender), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    modifier onlyOperator(string memory listType) {\\n        require(operators[listType].contains(msg.sender), \\\"Caller is not an operator\\\");\\n        _;\\n    }\\n\\n    function getOwners() public view returns (address[] memory) {\\n        return owners.values();\\n    }\\n\\n    function addOwner(address owner) public onlyOwner {\\n        owners.add(owner);\\n    }\\n}\\n\\n\",\"keccak256\":\"0x91e389b1e05ce8ef0b1c44c46fe9fc99a98cec3a471744178bfe2597504dc88c\",\"license\":\"LGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620011bd380380620011bd833981810160405281019062000037919062000146565b620000528160006200005a60201b6200064d1790919060201c565b5050620001c0565b60006200008a836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6200009260201b60201c565b905092915050565b6000620000a683836200010c60201b60201c565b6200010157826000018290806001815401808255809150506001900390600052602060002001600090919091909150558260000180549050836001016000848152602001908152602001600020819055506001905062000106565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000815190506200014081620001a6565b92915050565b6000602082840312156200015957600080fd5b600062000169848285016200012f565b91505092915050565b60006200017f8262000186565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b620001b18162000172565b8114620001bd57600080fd5b50565b610fed80620001d06000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80637e755a911161005b5780637e755a911461011157806387fa6cae1461012d578063a0e67e2b14610149578063ffc312151461016757610088565b8063278cf2d61461008d5780632c7ebda3146100a95780636af4012d146100d95780637065cb48146100f5575b600080fd5b6100a760048036038101906100a29190610af0565b610197565b005b6100c360048036038101906100be9190610aaf565b61027f565b6040516100d09190610c6f565b60405180910390f35b6100f360048036038101906100ee9190610af0565b6102ae565b005b61010f600480360381019061010a9190610a86565b6103b4565b005b61012b60048036038101906101269190610af0565b61041f565b005b61014760048036038101906101429190610af0565b610525565b005b61015161060d565b60405161015e9190610c6f565b60405180910390f35b610181600480360381019061017c9190610aaf565b61061e565b60405161018e9190610c6f565b60405180910390f35b6101ab33600061067d90919063ffffffff16565b6101ea576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101e190610c91565b60405180910390fd5b60005b815181101561027a57610266828281518110610232577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160028560405161024a9190610c58565b90815260200160405180910390206106ad90919063ffffffff16565b50808061027290610e96565b9150506101ed565b505050565b60606102a76002836040516102949190610c58565b90815260200160405180910390206106dd565b9050919050565b816102df336002836040516102c39190610c58565b908152602001604051809103902061067d90919063ffffffff16565b61031e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161031590610cb1565b60405180910390fd5b60005b82518110156103ae5761039a838281518110610366577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602002602001015160038660405161037e9190610c58565b90815260200160405180910390206106ad90919063ffffffff16565b5080806103a690610e96565b915050610321565b50505050565b6103c833600061067d90919063ffffffff16565b610407576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016103fe90610c91565b60405180910390fd5b61041b81600061064d90919063ffffffff16565b5050565b81610450336002836040516104349190610c58565b908152602001604051809103902061067d90919063ffffffff16565b61048f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161048690610cb1565b60405180910390fd5b60005b825181101561051f5761050b8382815181106104d7577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516003866040516104ef9190610c58565b908152602001604051809103902061064d90919063ffffffff16565b50808061051790610e96565b915050610492565b50505050565b61053933600061067d90919063ffffffff16565b610578576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161056f90610c91565b60405180910390fd5b60005b8151811015610608576105f48282815181106105c0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60200260200101516002856040516105d89190610c58565b908152602001604051809103902061064d90919063ffffffff16565b50808061060090610e96565b91505061057b565b505050565b606061061960006106dd565b905090565b60606106466003836040516106339190610c58565b90815260200160405180910390206106dd565b9050919050565b6000610675836000018373ffffffffffffffffffffffffffffffffffffffff1660001b6106fe565b905092915050565b60006106a5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b61076e565b905092915050565b60006106d5836000018373ffffffffffffffffffffffffffffffffffffffff1660001b610791565b905092915050565b606060006106ed83600001610917565b905060608190508092505050919050565b600061070a838361076e565b610763578260000182908060018154018082558091505060019003906000526020600020016000909190919091505582600001805490508360010160008481526020019081526020016000208190555060019050610768565b600090505b92915050565b600080836001016000848152602001908152602001600020541415905092915050565b6000808360010160008481526020019081526020016000205490506000811461090b5760006001826107c39190610db3565b90506000600186600001805490506107db9190610db3565b9050818114610896576000866000018281548110610822577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b906000526020600020015490508087600001848154811061086c577f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b90600052602060002001819055508387600101600083815260200190815260200160002081905550505b856000018054806108d0577f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b600190038181906000526020600020016000905590558560010160008681526020019081526020016000206000905560019350505050610911565b60009150505b92915050565b60608160000180548060200260200160405190810160405280929190818152602001828054801561096757602002820191906000526020600020905b815481526020019060010190808311610953575b50505050509050919050565b600061098661098184610cf6565b610cd1565b905080838252602082019050828560208602820111156109a557600080fd5b60005b858110156109d557816109bb8882610a1d565b8452602084019350602083019250506001810190506109a8565b5050509392505050565b60006109f26109ed84610d22565b610cd1565b905082815260208101848484011115610a0a57600080fd5b610a15848285610e23565b509392505050565b600081359050610a2c81610fa0565b92915050565b600082601f830112610a4357600080fd5b8135610a53848260208601610973565b91505092915050565b600082601f830112610a6d57600080fd5b8135610a7d8482602086016109df565b91505092915050565b600060208284031215610a9857600080fd5b6000610aa684828501610a1d565b91505092915050565b600060208284031215610ac157600080fd5b600082013567ffffffffffffffff811115610adb57600080fd5b610ae784828501610a5c565b91505092915050565b60008060408385031215610b0357600080fd5b600083013567ffffffffffffffff811115610b1d57600080fd5b610b2985828601610a5c565b925050602083013567ffffffffffffffff811115610b4657600080fd5b610b5285828601610a32565b9150509250929050565b6000610b688383610b74565b60208301905092915050565b610b7d81610de7565b82525050565b6000610b8e82610d63565b610b988185610d86565b9350610ba383610d53565b8060005b83811015610bd4578151610bbb8882610b5c565b9750610bc683610d79565b925050600181019050610ba7565b5085935050505092915050565b6000610bec82610d6e565b610bf68185610da8565b9350610c06818560208601610e32565b80840191505092915050565b6000610c1f602083610d97565b9150610c2a82610f4e565b602082019050919050565b6000610c42601983610d97565b9150610c4d82610f77565b602082019050919050565b6000610c648284610be1565b915081905092915050565b60006020820190508181036000830152610c898184610b83565b905092915050565b60006020820190508181036000830152610caa81610c12565b9050919050565b60006020820190508181036000830152610cca81610c35565b9050919050565b6000610cdb610cec565b9050610ce78282610e65565b919050565b6000604051905090565b600067ffffffffffffffff821115610d1157610d10610f0e565b5b602082029050602081019050919050565b600067ffffffffffffffff821115610d3d57610d3c610f0e565b5b610d4682610f3d565b9050602081019050919050565b6000819050602082019050919050565b600081519050919050565b600081519050919050565b6000602082019050919050565b600082825260208201905092915050565b600082825260208201905092915050565b600081905092915050565b6000610dbe82610e19565b9150610dc983610e19565b925082821015610ddc57610ddb610edf565b5b828203905092915050565b6000610df282610df9565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b82818337600083830152505050565b60005b83811015610e50578082015181840152602081019050610e35565b83811115610e5f576000848401525b50505050565b610e6e82610f3d565b810181811067ffffffffffffffff82111715610e8d57610e8c610f0e565b5b80604052505050565b6000610ea182610e19565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610ed457610ed3610edf565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000601f19601f8301169050919050565b7f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572600082015250565b7f43616c6c6572206973206e6f7420616e206f70657261746f7200000000000000600082015250565b610fa981610de7565b8114610fb457600080fd5b5056fea2646970667358221220e25e4fc0f2972475618f91cbe07a2539308d46e5700bd61fb49320bd5b8ce74964736f6c63430008040033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 622,
        "contract": "contracts/Cloud/AddressStore.sol:AddressStore",
        "label": "owners",
        "offset": 0,
        "slot": "0",
        "type": "t_struct(AddressSet)325_storage"
      },
      {
        "astId": 627,
        "contract": "contracts/Cloud/AddressStore.sol:AddressStore",
        "label": "operators",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_string_memory_ptr,t_struct(AddressSet)325_storage)"
      },
      {
        "astId": 632,
        "contract": "contracts/Cloud/AddressStore.sol:AddressStore",
        "label": "stores",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_string_memory_ptr,t_struct(AddressSet)325_storage)"
      }
    ],
    "types": {
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_string_memory_ptr,t_struct(AddressSet)325_storage)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => struct EnumerableSet.AddressSet)",
        "numberOfBytes": "32",
        "value": "t_struct(AddressSet)325_storage"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(AddressSet)325_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 324,
            "contract": "contracts/Cloud/AddressStore.sol:AddressStore",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)10_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(Set)10_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 5,
            "contract": "contracts/Cloud/AddressStore.sol:AddressStore",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 9,
            "contract": "contracts/Cloud/AddressStore.sol:AddressStore",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}